CCS PCM C Compiler, Version 4.104, 5967               22-set-16 15:26

               Filename: C:\Users\gggg\Google Drive\TCC\Código Final\TCC.lst

               ROM used: 1646 words (20%)
                         Largest free fragment is 2048
               RAM used: 25 (7%) at main() level
                         50 (14%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5D7
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.0
001E:  GOTO   021
001F:  BTFSC  0C.0
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   170
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   136
.................... #include <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #include <regs_887.h> 
.................... // Este arquivo contém as definições dos 
.................... // registradores SFR do PIC16F887 
....................  
.................... #BYTE INDF      = 0x00 
.................... #BYTE TMR0      = 0x01 
.................... #BYTE PCL      = 0x02 
....................  
.................... #BYTE STATUS   = 0x03 
....................    #BIT IRP   = STATUS.7 
....................    #BIT RP1   = STATUS.6 
....................    #BIT RP0   = STATUS.5 
....................    #BIT TO   = STATUS.4 
....................    #BIT PD   = STATUS.3 
....................    #BIT Z   = STATUS.2 
....................    #BIT DC   = STATUS.1 
....................    #BIT C   = STATUS.0 
.................... #BYTE FSR      = 0x04 
....................  
.................... #BYTE PORTA      = 0x05 
....................    #BIT RA0    = PORTA.0 
....................    #BIT RA1    = PORTA.1 
....................    #BIT RA2    = PORTA.2 
....................    #BIT RA3    = PORTA.3 
....................    #BIT RA4    = PORTA.4 
....................    #BIT RA5    = PORTA.5 
....................  
.................... #BYTE PORTB      = 0x06 
....................       #BIT RB0    = PORTB.0 
....................       #BIT RB1    = PORTB.1 
....................    #BIT RB2    = PORTB.2 
....................    #BIT RB3    = PORTB.3 
....................    #BIT RB4    = PORTB.4 
....................    #BIT RB5    = PORTB.5 
....................    #BIT RB6    = PORTB.6 
....................    #BIT RB7    = PORTB.7 
....................  
.................... #BYTE PORTC      = 0x07 
....................       #BIT RC0    = PORTC.0 
....................    #BIT RC1    = PORTC.1 
....................    #BIT RC2    = PORTC.2 
....................       #BIT RC3    = PORTC.3 
....................       #BIT RC4    = PORTC.4 
....................       #BIT RC5    = PORTC.5 
....................       #BIT RC6    = PORTC.6 
....................       #BIT RC7    = PORTC.7 
....................  
.................... #BYTE PORTD      = 0x08 
....................       #BIT RD0    = PORTD.0 
....................       #BIT RD1    = PORTD.1 
....................       #BIT RD2    = PORTD.2 
....................       #BIT RD3    = PORTD.3 
....................       #BIT RD4    = PORTD.4 
....................       #BIT RD5    = PORTD.5 
....................       #BIT RD6    = PORTD.6 
....................       #BIT RD7    = PORTD.7 
....................  
.................... #BYTE PORTE      = 0x09 
....................       #BIT RE0    = PORTE.0 
....................       #BIT RE1    = PORTE.1 
....................       #BIT RE2    = PORTE.2 
....................  
.................... #BYTE PCLATH   = 0x0A 
.................... #BYTE INTCON   = 0x0B 
....................    #BIT GIE   = INTCON.7 
....................    #BIT PEIE   = INTCON.6 
....................    #BIT TMR0IE = INTCON.5 
....................    #BIT T0IE   = INTCON.5 
....................    #BIT INTE   = INTCON.4 
....................    #BIT RBIE   = INTCON.3 
....................    #BIT TMR0IF = INTCON.2 
....................    #BIT T0IF   = INTCON.2 
....................    #BIT INTF   = INTCON.1 
....................    #BIT RBIF   = INTCON.0 
....................  
.................... #BYTE PIR1      = 0x0C 
....................    #BIT PSPIF    = PIR1.7 
....................    #BIT ADIF    = PIR1.6 
....................    #BIT RCIF    = PIR1.5 
....................    #BIT TXIF    = PIR1.4 
....................    #BIT SSPIF    = PIR1.3 
....................    #BIT CCP1IF = PIR1.2 
....................    #BIT TMR2IF = PIR1.1 
....................    #BIT TMR1IF = PIR1.0 
....................  
.................... #BYTE PIR2      = 0x0D 
....................  
.................... #BYTE TMR1L      = 0x0E 
.................... #BYTE TMR1H      = 0x0F 
.................... #BYTE T1CON      = 0x10 
....................    #BIT T1CKPS1= T1CON.5 
....................    #BIT T1CKPS0= T1CON.4 
....................    #BIT T1OSCEN= T1CON.3 
....................    #BIT T1SYNC   = T1CON.2 
....................    #BIT TMR1CS   = T1CON.1 
....................    #BIT TMR1ON   = T1CON.0 
....................  
.................... #BYTE TMR2      = 0x11 
.................... #BYTE T2CON      = 0x12 
....................    #BIT TOUTPS3= T2CON.6 
....................    #BIT TOUTPS2= T2CON.5 
....................    #BIT TOUTPS1= T2CON.4 
....................    #BIT TOUTPS0= T2CON.3 
....................    #BIT TMR2ON   = T2CON.2 
....................    #BIT T2CKPS1= T2CON.1 
....................    #BIT T2CKPS0= T2CON.0 
....................  
.................... #BYTE SSPBUF   = 0X13 
.................... #BYTE SSPCON   = 0X14 
....................    #BIT WCOL   = SSPCON.7 
....................    #BIT SSPOV   = SSPCON.6 
....................    #BIT SSPEN   = SSPCON.5 
....................    #BIT CKP   = SSPCON.4 
....................    #BIT SSPM3   = SSPCON.3 
....................    #BIT SSPM2   = SSPCON.2 
....................    #BIT SSPM1   = SSPCON.1 
....................    #BIT SSPM0   = SSPCON.0 
....................  
.................... #BYTE CCPR1L   = 0x15 
.................... #BYTE CCPR1H   = 0x16 
.................... #BYTE CCP1CON   = 0x17 
....................    #BIT CCP1X   = CCP1CON.5 
....................    #BIT CCP1Y   = CCP1CON.4 
....................    #BIT CCP1M3   = CCP1CON.3 
....................    #BIT CCP1M2   = CCP1CON.2 
....................    #BIT CCP1M1   = CCP1CON.1 
....................    #BIT CCP1M0   = CCP1CON.0 
....................  
.................... #BYTE RCSTA      = 0x18 
....................    #BIT SPEN   = RCSTA.7 
....................    #BIT RX9   = RCSTA.6 
....................    #BIT SREN    = RCSTA.5 
....................    #BIT CREN   = RCSTA.4 
....................    #BIT ADDEN   = RCSTA.3 
....................    #BIT FERR   = RCSTA.2 
....................    #BIT OERR    = RCSTA.1 
....................    #BIT RX9D   = RCSTA.0 
....................  
.................... #BYTE TXREG      = 0x19 
.................... #BYTE RCREG      = 0x1A 
....................  
.................... #BYTE CCPR2L   = 0x1B 
.................... #BYTE CCPR2H   = 0x1C 
.................... #BYTE CCP2CON   = 0x1D 
....................    #BIT CCP2X   = CCP2CON.5 
....................    #BIT CCP2Y   = CCP2CON.4 
....................    #BIT CCP2M3   = CCP2CON.3 
....................    #BIT CCP2M2   = CCP2CON.2 
....................    #BIT CCP2M1   = CCP2CON.1 
....................    #BIT CCP2M0   = CCP2CON.0 
....................  
.................... #BYTE ADRESH        = 0x1E      #BYTE ADRESL  = 0x9E 
.................... #BYTE ADCON0   = 0x1F 
....................    #BIT ADCS1  = ADCON0.7 
....................    #BIT ADCS0    = ADCON0.6 
....................    #BIT CHS3     = ADCON0.5 
....................    #BIT CHS2     = ADCON0.4 
....................    #BIT CHS1     = ADCON0.3 
....................    #BIT CHS0   = ADCON0.2 
....................    #BIT GO_DONE= ADCON0.1 
....................    #BIT ADON   = ADCON0.0 
....................  
.................... #BYTE OPTION   = 0x81 
....................    #BIT RBPU   = OPTION.7 
....................    #BIT INTEDG = OPTION.6 
....................    #BIT T0CS   = OPTION.5 
....................    #BIT T0SE   = OPTION.4 
....................    #BIT PSA   = OPTION.3 
....................    #BIT PS2   = OPTION.2 
....................    #BIT PS1   = OPTION.1 
....................    #BIT PS0   = OPTION.0 
....................  
.................... #BYTE TRISA      = 0x85 
.................... #BYTE TRISB      = 0x86 
.................... #BYTE TRISC      = 0x87 
.................... #BYTE TRISD      = 0x88 
.................... #BYTE TRISE      = 0x89 
....................    #BIT IBF   = TRISE.7 
....................    #BIT OBF   = TRISE.6 
....................    #BIT IBOV   = TRISE.5 
....................    #BIT PSPMODE   = TRISE.4 
....................  
.................... #BYTE PIE1      = 0x8C 
....................    #BIT PSPIE    = PIE1.7 
....................    #BIT ADIE    = PIE1.6 
....................    #BIT RCIE    = PIE1.5 
....................    #BIT TXIE    = PIE1.4 
....................    #BIT SSPIE    = PIE1.3 
....................    #BIT CCP1IE   = PIE1.2 
....................    #BIT TMR2IE = PIE1.1 
....................    #BIT TMR1IE = PIE1.0 
....................  
.................... #BYTE PIE2      = 0x8D 
.................... #BYTE PCON      = 0x8E 
....................    #BIT OSCF   = PCON.3 
....................    #BIT POR   = PCON.1 
....................    #BIT BOD   = PCON.0 
....................  
.................... #BYTE SSPCON2   = 0x91 
....................    #BIT GCEN    = SSPCON2.7 
....................    #BIT ACKSTAT = SSPCON2.6 
....................    #BIT ACKDT   = SSPCON2.5 
....................    #BIT ACKEN   = SSPCON2.4 
....................    #BIT RCEN    = SSPCON2.3 
....................    #BIT PEN     = SSPCON2.2 
....................    #BIT RSEN    = SSPCON2.1 
....................    #BIT SEN     = SSPCON2.0    
....................     
.................... #BYTE PR2      = 0x92 
.................... #BYTE SSPADD   = 0X93 
.................... #BYTE SSPSTAT   = 0X94 
....................    #BIT SMP   = SSPSTAT.7 
....................    #BIT CKE   = SSPSTAT.6 
....................    #BIT DA    = SSPSTAT.5 
....................    #BIT P     = SSPSTAT.4 
....................    #BIT S     = SSPSTAT.3 
....................    #BIT RW    = SSPSTAT.2 
....................    #BIT UA    = SSPSTAT.1 
....................    #BIT BF    = SSPSTAT.0 
....................  
.................... #BYTE WPUB      = 0x95 
.................... #BYTE IOCB      = 0x96 
.................... #BYTE ADRESL     = 0x9E 
.................... #BYTE ADCON1     = 0x9F 
....................    #BIT ADFM     = ADCON1.7 
....................    #BIT VCFG1    = ADCON1.5 
....................    #BIT VCFG0    = ADCON1.4 
....................  
.................... #BYTE EEDAT    = 0x10C 
.................... #BYTE EEADR    = 0x10D 
.................... #BYTE EEDATH   = 0x10E 
.................... #BYTE EEADRH   = 0x10F 
....................  
.................... #BYTE BAUDCTL   = 0x187 
....................    #BIT ABDOVF = BAUDCTL.7 
....................    #BIT RCIDL  = BAUDCTL.6 
....................    #BIT SCKP   = BAUDCTL.4 
....................    #BIT BRG16  = BAUDCTL.3 
....................    #BIT WUE    = BAUDCTL.1 
....................    #BIT ABDEN  = BAUDCTL.0 
....................  
.................... #BYTE ANSEL   = 0x188 
....................    #BIT ANS7 = ANSEL.7 
....................    #BIT ANS6 = ANSEL.6 
....................    #BIT ANS5 = ANSEL.5 
....................    #BIT ANS4 = ANSEL.4 
....................    #BIT ANS3 = ANSEL.3 
....................    #BIT ANS2 = ANSEL.2 
....................    #BIT ANS1 = ANSEL.1 
....................    #BIT ANS0 = ANSEL.0 
....................     
.................... #BYTE ANSELH   = 0x189 
....................    #BIT ANS13 = ANSELH.5 
....................    #BIT ANS12 = ANSELH.4 
....................    #BIT ANS11 = ANSELH.3 
....................    #BIT ANS10 = ANSELH.2 
....................    #BIT ANS9  = ANSELH.1 
....................    #BIT ANS8  = ANSELH.0 
....................  
.................... #BYTE EECON1   = 0x18C 
....................    #BIT EEPGD  = EECON1.7 
....................    #BIT EEIF   = EECON1.4 
....................    #BIT WRERR  = EECON1.3 
....................    #BIT WREN   = EECON1.2 
....................    #BIT WR   = EECON1.1 
....................    #BIT RD   = EECON1.0 
....................  
.................... #BYTE EECON2   = 0x18D 
....................  
.................... #BYTE TXSTA      = 0x98 
....................    #BIT CSRC   = TXSTA.7 
....................    #BIT TX9   = TXSTA.6 
....................    #BIT TXEN    = TXSTA.5 
....................    #BIT SYNC   = TXSTA.4 
....................    #BIT SENDB   = TXSTA.3 
....................    #BIT BRGH   = TXSTA.2 
....................    #BIT TRMT    = TXSTA.1 
....................    #BIT TX9D   = TXSTA.0 
....................  
.................... #BYTE SPBRG      = 0x99 
.................... #BYTE SPBRGH      = 0x9A 
....................  
....................  
....................  
.................... #use delay(clock=4MHz) 
*
017F:  MOVLW  4C
0180:  MOVWF  04
0181:  BCF    03.7
0182:  MOVF   00,W
0183:  BTFSC  03.2
0184:  GOTO   193
0185:  MOVLW  01
0186:  MOVWF  78
0187:  CLRF   77
0188:  DECFSZ 77,F
0189:  GOTO   188
018A:  DECFSZ 78,F
018B:  GOTO   187
018C:  MOVLW  4A
018D:  MOVWF  77
018E:  DECFSZ 77,F
018F:  GOTO   18E
0190:  GOTO   191
0191:  DECFSZ 00,F
0192:  GOTO   185
.................... #fuses INTRC_IO 
....................  
....................  
.................... void inicializa_timer1(void); 
.................... void inicializa_ad(void); 
.................... void coleta_dados (void); 
.................... void interrupcao_externa (void); 
.................... void controla_umidade(void); 
.................... void controla_temperatura(void); 
.................... void liga_ventilacao (int duty); 
.................... void liga_aquecimento (int potencia); 
....................  
....................  
.................... int meio_segundo=0, dois_segundos=0, temperatura=0, umidade=0, minuto=0, quinze=0, quinze_anterior=0, doze=0, troca=0, controle=0, potencia_configurada=22; 
.................... void main(void) 
.................... { 
*
05D7:  CLRF   04
05D8:  BCF    03.7
05D9:  MOVLW  1F
05DA:  ANDWF  03,F
05DB:  CLRF   28
05DC:  CLRF   29
05DD:  CLRF   2A
05DE:  CLRF   2B
05DF:  CLRF   2C
05E0:  CLRF   2D
05E1:  CLRF   2E
05E2:  CLRF   2F
05E3:  CLRF   30
05E4:  CLRF   31
05E5:  MOVLW  16
05E6:  MOVWF  32
05E7:  BSF    03.5
05E8:  BSF    03.6
05E9:  MOVF   09,W
05EA:  ANDLW  C0
05EB:  MOVWF  09
05EC:  BCF    03.6
05ED:  BCF    1F.4
05EE:  BCF    1F.5
05EF:  MOVLW  00
05F0:  BSF    03.6
05F1:  MOVWF  08
05F2:  BCF    03.5
05F3:  CLRF   07
05F4:  CLRF   08
05F5:  CLRF   09
.................... //ISSO 
.................... //Configuração das portas 
.................... TRISA=0b00000111; TRISB=0b00011001; TRISC=0; TRISD=0; TRISE=0; 
05F6:  MOVLW  07
05F7:  BSF    03.5
05F8:  BCF    03.6
05F9:  MOVWF  05
05FA:  MOVLW  19
05FB:  MOVWF  06
05FC:  CLRF   07
05FD:  CLRF   08
05FE:  CLRF   09
.................... PORTA=0; PORTB=0; PORTC=0; PORTD=0; PORTE=0; 
05FF:  BCF    03.5
0600:  CLRF   05
0601:  CLRF   06
0602:  CLRF   07
0603:  CLRF   08
0604:  CLRF   09
.................... CCP1CON=0; 
0605:  CLRF   17
.................... CCP2CON=0; 
0606:  CLRF   1D
....................  
.................... //Inicializações 
....................  
.................... inicializa_ad(); 
0607:  GOTO   1A1
.................... inicializa_timer1(); 
0608:  GOTO   1B3
....................  
.................... INTEDG=1; INTE=1; GIE=1; //Habilitação da interrupção externa, com borda de subida. 
0609:  BSF    03.5
060A:  BSF    01.6
060B:  BCF    03.5
060C:  BSF    0B.4
060D:  BSF    0B.7
.................... TMR1IE=1; PEIE=1; //Habilitação interrupção do timer1, para relógio. 
060E:  BSF    03.5
060F:  BSF    0C.0
0610:  BCF    03.5
0611:  BSF    0B.6
....................  
....................  
.................... WPUB=0xFF; //Resistores de pull-up, para impedir que pinos fiquem 'flutuando' 
0612:  MOVLW  FF
0613:  BSF    03.5
0614:  MOVWF  15
.................... IOCB=0xFF; 
0615:  MOVWF  16
.................... RD7=0; //Desabilita saída do TCA 
0616:  BCF    03.5
0617:  BCF    08.7
.................... RD1=1; RD3=1; 
0618:  BSF    08.1
0619:  BSF    08.3
.................... coleta_dados(); //Aquisição da temperatura e umidade 
061A:  CALL   33A
....................  
.................... while (true) 
.................... { 
.................... if (RA2==1){RD2=0; liga_aquecimento(0); liga_ventilacao(0);RD1=0;while(RA2);} 
061B:  BTFSS  05.2
061C:  GOTO   631
061D:  BCF    08.2
061E:  CLRF   27
061F:  BTFSC  0B.7
0620:  BSF    27.7
0621:  BCF    0B.7
0622:  CLRF   4A
0623:  CALL   08D
0624:  BTFSC  27.7
0625:  BSF    0B.7
0626:  CLRF   27
0627:  BTFSC  0B.7
0628:  BSF    27.7
0629:  BCF    0B.7
062A:  CLRF   4A
062B:  CALL   038
062C:  BTFSC  27.7
062D:  BSF    0B.7
062E:  BCF    08.1
062F:  BTFSC  05.2
0630:  GOTO   62F
.................... RD3=~RD3;  
0631:  MOVLW  08
0632:  XORWF  08,F
....................  
.................... if (doze==0 || doze==2) // MODO DIA 
0633:  MOVF   2F,F
0634:  BTFSC  03.2
0635:  GOTO   63A
0636:  MOVF   2F,W
0637:  SUBLW  02
0638:  BTFSS  03.2
0639:  GOTO   64A
....................    { 
....................    RD2=1; //Liga iluminação artificial 
063A:  BSF    08.2
....................    RB1=0; RD4=0; //garante solenoides fechadas 
063B:  BCF    06.1
063C:  BCF    08.4
....................    controla_temperatura(); 
063D:  GOTO   529
....................    if (quinze!=quinze_anterior){ RD1=!RD1; RD0=!RD1;quinze_anterior=quinze;} //Fica ligando e desligando a bomba de circulação e oxigenação a cada 15min 
063E:  MOVF   2E,W
063F:  SUBWF  2D,W
0640:  BTFSC  03.2
0641:  GOTO   64A
0642:  MOVLW  02
0643:  XORWF  08,F
0644:  BTFSC  08.1
0645:  BCF    08.0
0646:  BTFSS  08.1
0647:  BSF    08.0
0648:  MOVF   2D,W
0649:  MOVWF  2E
....................  
....................     
....................    } 
....................  
.................... if (doze==1 || doze==3) // MODO NOITE 
064A:  DECFSZ 2F,W
064B:  GOTO   64D
064C:  GOTO   651
064D:  MOVF   2F,W
064E:  SUBLW  03
064F:  BTFSS  03.2
0650:  GOTO   664
....................    { 
....................    RD2=0; //Desliga iluminação artificial 
0651:  BCF    08.2
....................       RB1=0; RD4=0; //garante solenoides fechadas 
0652:  BCF    06.1
0653:  BCF    08.4
....................    if (quinze!=quinze_anterior) //Liga circulação de nutrientes por 15 min a cada duas horas 
0654:  MOVF   2E,W
0655:  SUBWF  2D,W
0656:  BTFSC  03.2
0657:  GOTO   664
....................       { 
....................        
....................       RD1=0; // Desliga bomba de circulação 
0658:  BCF    08.1
....................       RD0=!RD0; // Liga e desliga a oxigenação a cada 15 min 
0659:  MOVLW  01
065A:  XORWF  08,F
....................       controle++; 
065B:  INCF   31,F
....................       if(controle==7){controle=0; RD1=1;} 
065C:  MOVF   31,W
065D:  SUBLW  07
065E:  BTFSS  03.2
065F:  GOTO   662
0660:  CLRF   31
0661:  BSF    08.1
....................       quinze_anterior=quinze;  } 
0662:  MOVF   2D,W
0663:  MOVWF  2E
....................  
....................     
....................    } 
....................  
....................  
.................... if ((meio_segundo-dois_segundos)==4)//coleta temperatura e umidade cada 2 seg 
0664:  MOVF   29,W
0665:  SUBWF  28,W
0666:  SUBLW  04
0667:  BTFSS  03.2
0668:  GOTO   66C
.................... {dois_segundos=meio_segundo; 
0669:  MOVF   28,W
066A:  MOVWF  29
.................... coleta_dados();  }  
066B:  CALL   33A
.................... //!controla_umidade(); 
.................... }//Fim while true 
066C:  GOTO   61B
.................... }//Fim do main 
....................  
.................... void controla_temperatura(void){ 
....................  
066D:  SLEEP
....................    if (temperatura<=18) liga_aquecimento(100); 
*
0529:  MOVF   2A,W
052A:  SUBLW  12
052B:  BTFSS  03.0
052C:  GOTO   536
052D:  CLRF   27
052E:  BTFSC  0B.7
052F:  BSF    27.7
0530:  BCF    0B.7
0531:  MOVLW  64
0532:  MOVWF  4A
0533:  CALL   08D
0534:  BTFSC  27.7
0535:  BSF    0B.7
....................  
....................    if ((temperatura>18)&&(temperatura<=22)) liga_aquecimento(70); 
0536:  MOVF   2A,W
0537:  SUBLW  12
0538:  BTFSC  03.0
0539:  GOTO   547
053A:  MOVF   2A,W
053B:  SUBLW  16
053C:  BTFSS  03.0
053D:  GOTO   547
053E:  CLRF   27
053F:  BTFSC  0B.7
0540:  BSF    27.7
0541:  BCF    0B.7
0542:  MOVLW  46
0543:  MOVWF  4A
0544:  CALL   08D
0545:  BTFSC  27.7
0546:  BSF    0B.7
....................  
....................    if ((temperatura>22)&&(temperatura<=28)) liga_aquecimento(50); 
0547:  MOVF   2A,W
0548:  SUBLW  16
0549:  BTFSC  03.0
054A:  GOTO   558
054B:  MOVF   2A,W
054C:  SUBLW  1C
054D:  BTFSS  03.0
054E:  GOTO   558
054F:  CLRF   27
0550:  BTFSC  0B.7
0551:  BSF    27.7
0552:  BCF    0B.7
0553:  MOVLW  32
0554:  MOVWF  4A
0555:  CALL   08D
0556:  BTFSC  27.7
0557:  BSF    0B.7
....................  
....................    if ((temperatura>28)&&(temperatura<=30)) liga_aquecimento(30); 
0558:  MOVF   2A,W
0559:  SUBLW  1C
055A:  BTFSC  03.0
055B:  GOTO   569
055C:  MOVF   2A,W
055D:  SUBLW  1E
055E:  BTFSS  03.0
055F:  GOTO   569
0560:  CLRF   27
0561:  BTFSC  0B.7
0562:  BSF    27.7
0563:  BCF    0B.7
0564:  MOVLW  1E
0565:  MOVWF  4A
0566:  CALL   08D
0567:  BTFSC  27.7
0568:  BSF    0B.7
....................  
....................    if (temperatura>30) liga_aquecimento(0); //Desliga aquecimento 
0569:  MOVF   2A,W
056A:  SUBLW  1E
056B:  BTFSC  03.0
056C:  GOTO   575
056D:  CLRF   27
056E:  BTFSC  0B.7
056F:  BSF    27.7
0570:  BCF    0B.7
0571:  CLRF   4A
0572:  CALL   08D
0573:  BTFSC  27.7
0574:  BSF    0B.7
....................  
....................    if ((temperatura>35)&&(temperatura<=40)) {liga_ventilacao(20);liga_aquecimento(0);} 
0575:  MOVF   2A,W
0576:  SUBLW  23
0577:  BTFSC  03.0
0578:  GOTO   58E
0579:  MOVF   2A,W
057A:  SUBLW  28
057B:  BTFSS  03.0
057C:  GOTO   58E
057D:  CLRF   27
057E:  BTFSC  0B.7
057F:  BSF    27.7
0580:  BCF    0B.7
0581:  MOVLW  14
0582:  MOVWF  4A
0583:  CALL   038
0584:  BTFSC  27.7
0585:  BSF    0B.7
0586:  CLRF   27
0587:  BTFSC  0B.7
0588:  BSF    27.7
0589:  BCF    0B.7
058A:  CLRF   4A
058B:  CALL   08D
058C:  BTFSC  27.7
058D:  BSF    0B.7
....................  
....................    if ((temperatura>40)&&(temperatura<45)) {liga_ventilacao(40);liga_aquecimento(0);} 
058E:  MOVF   2A,W
058F:  SUBLW  28
0590:  BTFSC  03.0
0591:  GOTO   5A7
0592:  MOVF   2A,W
0593:  SUBLW  2C
0594:  BTFSS  03.0
0595:  GOTO   5A7
0596:  CLRF   27
0597:  BTFSC  0B.7
0598:  BSF    27.7
0599:  BCF    0B.7
059A:  MOVLW  28
059B:  MOVWF  4A
059C:  CALL   038
059D:  BTFSC  27.7
059E:  BSF    0B.7
059F:  CLRF   27
05A0:  BTFSC  0B.7
05A1:  BSF    27.7
05A2:  BCF    0B.7
05A3:  CLRF   4A
05A4:  CALL   08D
05A5:  BTFSC  27.7
05A6:  BSF    0B.7
....................  
....................    if (temperatura>=45) {liga_ventilacao(80);liga_aquecimento(0);} 
05A7:  MOVF   2A,W
05A8:  SUBLW  2C
05A9:  BTFSC  03.0
05AA:  GOTO   5BC
05AB:  CLRF   27
05AC:  BTFSC  0B.7
05AD:  BSF    27.7
05AE:  BCF    0B.7
05AF:  MOVLW  50
05B0:  MOVWF  4A
05B1:  CALL   038
05B2:  BTFSC  27.7
05B3:  BSF    0B.7
05B4:  CLRF   27
05B5:  BTFSC  0B.7
05B6:  BSF    27.7
05B7:  BCF    0B.7
05B8:  CLRF   4A
05B9:  CALL   08D
05BA:  BTFSC  27.7
05BB:  BSF    0B.7
....................  
....................  
....................  
....................    if ((temperatura<35)&&(umidade<70)) 
05BC:  MOVF   2A,W
05BD:  SUBLW  22
05BE:  BTFSS  03.0
05BF:  GOTO   5D4
05C0:  MOVF   2B,W
05C1:  SUBLW  45
05C2:  BTFSS  03.0
05C3:  GOTO   5D4
....................    { 
....................       if ((minuto>11)||(minuto<9)) liga_ventilacao (0); //Desliga ventilação; 
05C4:  MOVF   2C,W
05C5:  SUBLW  0B
05C6:  BTFSS  03.0
05C7:  GOTO   5CC
05C8:  MOVF   2C,W
05C9:  SUBLW  08
05CA:  BTFSS  03.0
05CB:  GOTO   5D4
05CC:  CLRF   27
05CD:  BTFSC  0B.7
05CE:  BSF    27.7
05CF:  BCF    0B.7
05D0:  CLRF   4A
05D1:  CALL   038
05D2:  BTFSC  27.7
05D3:  BSF    0B.7
....................    } 
....................  
....................  
.................... } // Fim de controle de temperatura 
05D4:  BCF    0A.3
05D5:  BCF    0A.4
05D6:  GOTO   63E (RETURN)
....................  
.................... void controla_umidade(void){ 
....................  
....................    if (umidade<=45) RB2=1; //Liga nebulização 
....................  
....................    if (umidade>=55) RB2=0; //Desliga nebulização 
....................  
....................    if ((umidade>70)&&(umidade<80)){ 
....................  
....................    if (temperatura<30) liga_ventilacao(20);} 
....................  
....................    if ((umidade>80)&&(temperatura<30)) liga_ventilacao(40); 
....................  
.................... } //Fim de controle umidade 
....................  
....................  
.................... void liga_aquecimento (int potencia) 
.................... {  
.................... GIE=0; //Desabilita interrupções para evitar erro 
*
008D:  BCF    0B.7
.................... int j=0; 
008E:  CLRF   4B
....................  
.................... if ((potencia==0)&&(potencia_configurada!=0)) 
008F:  MOVF   4A,F
0090:  BTFSS  03.2
0091:  GOTO   098
0092:  MOVF   32,F
0093:  BTFSC  03.2
0094:  GOTO   098
.................... {RD7=0; RD5=0;  potencia_configurada=0;} 
0095:  BCF    08.7
0096:  BCF    08.5
0097:  CLRF   32
....................  
.................... if ((potencia==100)&&(potencia_configurada!=100)) 
0098:  MOVF   4A,W
0099:  SUBLW  64
009A:  BTFSS  03.2
009B:  GOTO   0B3
009C:  MOVF   32,W
009D:  SUBLW  64
009E:  BTFSC  03.2
009F:  GOTO   0B3
.................... { 
.................... potencia_configurada=100; 
00A0:  MOVLW  64
00A1:  MOVWF  32
.................... RD6=0; //Seleciona potenciometro para descer tensão 
00A2:  BCF    08.6
.................... for (j=0;j<100;j++)//Garante tensão na saída do potenciometro igual a zero 
00A3:  CLRF   4B
00A4:  MOVF   4B,W
00A5:  SUBLW  63
00A6:  BTFSS  03.0
00A7:  GOTO   0B2
.................... { 
....................   RD5=1; 
00A8:  BSF    08.5
....................   delay_us(5); 
00A9:  GOTO   0AA
00AA:  GOTO   0AB
00AB:  NOP
....................   RD5=0; 
00AC:  BCF    08.5
....................   delay_us(5); 
00AD:  GOTO   0AE
00AE:  GOTO   0AF
00AF:  NOP
.................... } 
00B0:  INCF   4B,F
00B1:  GOTO   0A4
....................  
....................  
.................... RD7=1; // Aciona a lampada 
00B2:  BSF    08.7
.................... } //Fim da pot 100 
....................  
.................... if((potencia==70)&&(potencia_configurada!=70)) 
00B3:  MOVF   4A,W
00B4:  SUBLW  46
00B5:  BTFSS  03.2
00B6:  GOTO   0DE
00B7:  MOVF   32,W
00B8:  SUBLW  46
00B9:  BTFSC  03.2
00BA:  GOTO   0DE
.................... { 
.................... potencia_configurada=70; 
00BB:  MOVLW  46
00BC:  MOVWF  32
.................... RD6=0; //Seleciona potenciometro para descer tensão 
00BD:  BCF    08.6
.................... for (j=0;j<100;j++)//Garante tensão na saída do potenciometro igual a zero 
00BE:  CLRF   4B
00BF:  MOVF   4B,W
00C0:  SUBLW  63
00C1:  BTFSS  03.0
00C2:  GOTO   0CD
.................... { 
....................   RD5=1; 
00C3:  BSF    08.5
....................   delay_us(5); 
00C4:  GOTO   0C5
00C5:  GOTO   0C6
00C6:  NOP
....................   RD5=0; 
00C7:  BCF    08.5
....................   delay_us(5); 
00C8:  GOTO   0C9
00C9:  GOTO   0CA
00CA:  NOP
.................... } 
00CB:  INCF   4B,F
00CC:  GOTO   0BF
....................  
....................    RD6=1; //Seleciona potenciometro para subir tensão 
00CD:  BSF    08.6
....................     for (j=0;j<42;j++)//Garante tensão na saída do potenciometro de 2,1 volts (54graus) 
00CE:  CLRF   4B
00CF:  MOVF   4B,W
00D0:  SUBLW  29
00D1:  BTFSS  03.0
00D2:  GOTO   0DD
....................     { 
....................     RD5=1; 
00D3:  BSF    08.5
....................     delay_us(5); 
00D4:  GOTO   0D5
00D5:  GOTO   0D6
00D6:  NOP
....................     RD5=0; 
00D7:  BCF    08.5
....................     delay_us(5); 
00D8:  GOTO   0D9
00D9:  GOTO   0DA
00DA:  NOP
....................    } 
00DB:  INCF   4B,F
00DC:  GOTO   0CF
....................    RD7=1; // Aciona lampada 
00DD:  BSF    08.7
.................... } 
....................  
.................... if ((potencia==50)&&(potencia_configurada!=50)) 
00DE:  MOVF   4A,W
00DF:  SUBLW  32
00E0:  BTFSS  03.2
00E1:  GOTO   109
00E2:  MOVF   32,W
00E3:  SUBLW  32
00E4:  BTFSC  03.2
00E5:  GOTO   109
.................... { 
.................... potencia_configurada=50; 
00E6:  MOVLW  32
00E7:  MOVWF  32
.................... RD6=0; //Seleciona potenciometro para descer tensão 
00E8:  BCF    08.6
.................... for (j=0;j<100;j++)//Garante tensão na saída do potenciometro igual a zero 
00E9:  CLRF   4B
00EA:  MOVF   4B,W
00EB:  SUBLW  63
00EC:  BTFSS  03.0
00ED:  GOTO   0F8
.................... { 
....................   RD5=1; 
00EE:  BSF    08.5
....................   delay_us(5); 
00EF:  GOTO   0F0
00F0:  GOTO   0F1
00F1:  NOP
....................   RD5=0; 
00F2:  BCF    08.5
....................   delay_us(5); 
00F3:  GOTO   0F4
00F4:  GOTO   0F5
00F5:  NOP
.................... } 
00F6:  INCF   4B,F
00F7:  GOTO   0EA
....................    RD6=1; //Seleciona potenciometro para subir tensão 
00F8:  BSF    08.6
....................     for (j=0;j<70;j++)//Garante tensão na saída do potenciometro de 3,5 volts (90graus) 
00F9:  CLRF   4B
00FA:  MOVF   4B,W
00FB:  SUBLW  45
00FC:  BTFSS  03.0
00FD:  GOTO   108
....................     { 
....................     RD5=1; 
00FE:  BSF    08.5
....................     delay_us(5); 
00FF:  GOTO   100
0100:  GOTO   101
0101:  NOP
....................     RD5=0; 
0102:  BCF    08.5
....................     delay_us(5); 
0103:  GOTO   104
0104:  GOTO   105
0105:  NOP
....................    } 
0106:  INCF   4B,F
0107:  GOTO   0FA
....................    RD7=1; // Aciona lampada 
0108:  BSF    08.7
.................... } 
....................  
.................... if ((potencia==30)&&(potencia_configurada!=30)) 
0109:  MOVF   4A,W
010A:  SUBLW  1E
010B:  BTFSS  03.2
010C:  GOTO   134
010D:  MOVF   32,W
010E:  SUBLW  1E
010F:  BTFSC  03.2
0110:  GOTO   134
.................... { 
.................... potencia_configurada=30; 
0111:  MOVLW  1E
0112:  MOVWF  32
.................... RD6=0; //Seleciona potenciometro para descer tensão 
0113:  BCF    08.6
.................... for (j=0;j<100;j++)//Garante tensão na saída do potenciometro igual a zero 
0114:  CLRF   4B
0115:  MOVF   4B,W
0116:  SUBLW  63
0117:  BTFSS  03.0
0118:  GOTO   123
.................... { 
....................   RD5=1; 
0119:  BSF    08.5
....................   delay_us(5); 
011A:  GOTO   11B
011B:  GOTO   11C
011C:  NOP
....................   RD5=0; 
011D:  BCF    08.5
....................   delay_us(5); 
011E:  GOTO   11F
011F:  GOTO   120
0120:  NOP
.................... } 
0121:  INCF   4B,F
0122:  GOTO   115
....................    RD6=1; //Seleciona potenciometro para subir tensão 
0123:  BSF    08.6
....................     for (j=0;j<98;j++)//Garante tensão na saída do potenciometro de 4,9 volts (126graus) 
0124:  CLRF   4B
0125:  MOVF   4B,W
0126:  SUBLW  61
0127:  BTFSS  03.0
0128:  GOTO   133
....................     { 
....................     RD5=1; 
0129:  BSF    08.5
....................     delay_us(5); 
012A:  GOTO   12B
012B:  GOTO   12C
012C:  NOP
....................     RD5=0; 
012D:  BCF    08.5
....................     delay_us(5); 
012E:  GOTO   12F
012F:  GOTO   130
0130:  NOP
....................    } 
0131:  INCF   4B,F
0132:  GOTO   125
....................    RD7=1; // Aciona lampada 
0133:  BSF    08.7
.................... } 
....................  
.................... GIE=1; // Reabilita interrupções 
0134:  BSF    0B.7
....................  
.................... }//Fim de liga aquecimento 
0135:  RETURN
....................  
....................  
.................... void liga_ventilacao (int duty){ 
....................    GIE=0; 
*
0038:  BCF    0B.7
....................  
....................    if (duty==0) 
0039:  MOVF   4A,F
003A:  BTFSS  03.2
003B:  GOTO   045
....................    { 
....................     /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 0 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................     PR2 = 0b11111001; 
003C:  MOVLW  F9
003D:  BSF    03.5
003E:  MOVWF  12
....................     T2CON = 0b00000101 ; 
003F:  MOVLW  05
0040:  BCF    03.5
0041:  MOVWF  12
....................     CCPR1L = 0b00000000 ; 
0042:  CLRF   15
....................     CCP1CON = 0b00001100 ; 
0043:  MOVLW  0C
0044:  MOVWF  17
....................    } 
....................  
....................  
....................    if (duty==20) 
0045:  MOVF   4A,W
0046:  SUBLW  14
0047:  BTFSS  03.2
0048:  GOTO   053
....................    { 
....................     /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 20 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................     PR2 = 0b11111001 ; 
0049:  MOVLW  F9
004A:  BSF    03.5
004B:  MOVWF  12
....................     T2CON = 0b00000101 ; 
004C:  MOVLW  05
004D:  BCF    03.5
004E:  MOVWF  12
....................     CCPR1L = 0b00110001 ; 
004F:  MOVLW  31
0050:  MOVWF  15
....................     CCP1CON = 0b00111100 ; 
0051:  MOVLW  3C
0052:  MOVWF  17
....................    } 
....................  
....................    if (duty==40) 
0053:  MOVF   4A,W
0054:  SUBLW  28
0055:  BTFSS  03.2
0056:  GOTO   061
....................    { 
....................    /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 40 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................    PR2 = 0b11111001 ; 
0057:  MOVLW  F9
0058:  BSF    03.5
0059:  MOVWF  12
....................     T2CON = 0b00000101 ; 
005A:  MOVLW  05
005B:  BCF    03.5
005C:  MOVWF  12
....................     CCPR1L = 0b01100011 ; 
005D:  MOVLW  63
005E:  MOVWF  15
....................     CCP1CON = 0b00111100 ; 
005F:  MOVLW  3C
0060:  MOVWF  17
....................    } 
....................  
....................    if (duty==60) 
0061:  MOVF   4A,W
0062:  SUBLW  3C
0063:  BTFSS  03.2
0064:  GOTO   06F
....................    { 
....................    /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 60 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................    PR2 = 0b11111001 ; 
0065:  MOVLW  F9
0066:  BSF    03.5
0067:  MOVWF  12
....................     T2CON = 0b00000101 ; 
0068:  MOVLW  05
0069:  BCF    03.5
006A:  MOVWF  12
....................     CCPR1L = 0b10010101 ; 
006B:  MOVLW  95
006C:  MOVWF  15
....................     CCP1CON = 0b00111100 ; 
006D:  MOVLW  3C
006E:  MOVWF  17
....................    } 
....................  
....................    if (duty==80) 
006F:  MOVF   4A,W
0070:  SUBLW  50
0071:  BTFSS  03.2
0072:  GOTO   07D
....................    { 
....................    /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 80 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................    PR2 = 0b11111001 ; 
0073:  MOVLW  F9
0074:  BSF    03.5
0075:  MOVWF  12
....................     T2CON = 0b00000101 ; 
0076:  MOVLW  05
0077:  BCF    03.5
0078:  MOVWF  12
....................     CCPR1L = 0b11000111 ; 
0079:  MOVLW  C7
007A:  MOVWF  15
....................     CCP1CON = 0b00111100 ; 
007B:  MOVLW  3C
007C:  MOVWF  17
....................    } 
....................  
....................    if (duty==100) 
007D:  MOVF   4A,W
007E:  SUBLW  64
007F:  BTFSS  03.2
0080:  GOTO   08B
....................    { 
....................    /* 
....................     * Configuração dos registradores de PWM 
....................     * Fosc = 4000000 Hz 
....................     * Fpwm = 1000.00 Hz 
....................     * Duty Cycle = 100 % 
....................     * Resolução 10 bits 
....................     *Prescaler de 4 
....................     */ 
....................    PR2 = 0b11111001 ; 
0081:  MOVLW  F9
0082:  BSF    03.5
0083:  MOVWF  12
....................     T2CON = 0b00000101 ; 
0084:  MOVLW  05
0085:  BCF    03.5
0086:  MOVWF  12
....................     CCPR1L = 0b11111001 ; 
0087:  MOVLW  F9
0088:  MOVWF  15
....................     CCP1CON = 0b00111100 ; 
0089:  MOVLW  3C
008A:  MOVWF  17
....................  
....................    } 
....................  
.................... GIE=1; 
008B:  BSF    0B.7
.................... }//Fim de liga ventilação 
008C:  RETURN
....................  
.................... void coleta_dados (void){ 
.................... PEIE=0; // desabilita interrupção timer 1 para evitar erro 
*
033A:  BCF    0B.6
.................... int j=0; 
.................... int16 palavra=0; 
033B:  CLRF   33
033C:  CLRF   35
033D:  CLRF   34
....................  
....................  
.................... // Canal 0 do AD é temperatura e canal 1 é a umidade 
.................... CHS3=0;CHS2=0;CHS1=0;CHS0=0; // Seleciona canal 0 (RA0) para conversão. 
033E:  BCF    1F.5
033F:  BCF    1F.4
0340:  BCF    1F.3
0341:  BCF    1F.2
....................  
....................  
.................... //********DADOS******** 
.................... for (j=0; j<2; j++) 
0342:  CLRF   33
0343:  MOVF   33,W
0344:  SUBLW  01
0345:  BTFSS  03.0
0346:  GOTO   527
.................... { 
....................   GO_DONE=1; // Inicia conversão. 
0347:  BSF    1F.1
....................   while (GO_DONE); // Aguarda conversão terminar. 
0348:  BTFSC  1F.1
0349:  GOTO   348
....................   palavra=ADRESH*256+ADRESL; 
034A:  CLRF   7A
034B:  CLRF   36
034C:  BSF    03.5
034D:  MOVF   1E,W
034E:  BCF    03.5
034F:  ADDWF  36,W
0350:  MOVWF  34
0351:  MOVF   1E,W
0352:  MOVWF  35
0353:  BTFSC  03.0
0354:  INCF   35,F
....................   ADCON0=ADCON0+4; //seleciona próximo canal para conversão. 
0355:  MOVLW  04
0356:  ADDWF  1F,F
....................  
....................   if (j==0) // TEMPERATURA 
0357:  MOVF   33,F
0358:  BTFSS  03.2
0359:  GOTO   391
....................   { 
....................    temperatura=(palavra*50.0)/1023; //Transforma leitura do AD na temperatura correspondente 
035A:  MOVF   35,W
035B:  MOVWF  37
035C:  MOVF   34,W
035D:  MOVWF  36
035E:  CALL   1BF
035F:  MOVF   7A,W
0360:  MOVWF  39
0361:  MOVF   79,W
0362:  MOVWF  38
0363:  MOVF   78,W
0364:  MOVWF  37
0365:  MOVF   77,W
0366:  MOVWF  36
0367:  CLRF   3D
0368:  CLRF   3C
0369:  MOVLW  48
036A:  MOVWF  3B
036B:  MOVLW  84
036C:  MOVWF  3A
036D:  CALL   1DC
036E:  MOVF   77,W
036F:  MOVWF  36
0370:  MOVF   78,W
0371:  MOVWF  37
0372:  MOVF   79,W
0373:  MOVWF  38
0374:  MOVF   7A,W
0375:  MOVWF  39
0376:  MOVWF  3D
0377:  MOVF   79,W
0378:  MOVWF  3C
0379:  MOVF   78,W
037A:  MOVWF  3B
037B:  MOVF   77,W
037C:  MOVWF  3A
037D:  CLRF   41
037E:  MOVLW  C0
037F:  MOVWF  40
0380:  MOVLW  7F
0381:  MOVWF  3F
0382:  MOVLW  88
0383:  MOVWF  3E
0384:  CALL   251
0385:  MOVF   7A,W
0386:  MOVWF  39
0387:  MOVF   79,W
0388:  MOVWF  38
0389:  MOVF   78,W
038A:  MOVWF  37
038B:  MOVF   77,W
038C:  MOVWF  36
038D:  CALL   31B
038E:  MOVF   78,W
038F:  MOVWF  2A
....................    } 
....................  
....................   else if (j==1) // UMIDADE 
0390:  GOTO   525
0391:  DECFSZ 33,W
0392:  GOTO   525
....................   { 
....................      umidade=((32.26*5.0*palavra)/1023)-25.806; //Transforma leitura do AD na umidade relativa correspondente 
0393:  MOVF   35,W
0394:  MOVWF  37
0395:  MOVF   34,W
0396:  MOVWF  36
0397:  CALL   1BF
0398:  MOVLW  CC
0399:  MOVWF  39
039A:  MOVLW  4C
039B:  MOVWF  38
039C:  MOVLW  21
039D:  MOVWF  37
039E:  MOVLW  86
039F:  MOVWF  36
03A0:  MOVF   7A,W
03A1:  MOVWF  3D
03A2:  MOVF   79,W
03A3:  MOVWF  3C
03A4:  MOVF   78,W
03A5:  MOVWF  3B
03A6:  MOVF   77,W
03A7:  MOVWF  3A
03A8:  CALL   1DC
03A9:  MOVF   77,W
03AA:  MOVWF  36
03AB:  MOVF   78,W
03AC:  MOVWF  37
03AD:  MOVF   79,W
03AE:  MOVWF  38
03AF:  MOVF   7A,W
03B0:  MOVWF  39
03B1:  MOVF   39,W
03B2:  MOVWF  3D
03B3:  MOVF   38,W
03B4:  MOVWF  3C
03B5:  MOVF   37,W
03B6:  MOVWF  3B
03B7:  MOVF   36,W
03B8:  MOVWF  3A
03B9:  CLRF   41
03BA:  MOVLW  C0
03BB:  MOVWF  40
03BC:  MOVLW  7F
03BD:  MOVWF  3F
03BE:  MOVLW  88
03BF:  MOVWF  3E
03C0:  CALL   251
03C1:  MOVF   77,W
03C2:  MOVWF  36
03C3:  MOVF   78,W
03C4:  MOVWF  37
03C5:  MOVF   79,W
03C6:  MOVWF  38
03C7:  MOVF   7A,W
03C8:  MOVWF  39
03C9:  BSF    03.1
03CA:  MOVF   39,W
03CB:  MOVWF  3D
03CC:  MOVF   38,W
03CD:  MOVWF  3C
03CE:  MOVF   37,W
03CF:  MOVWF  3B
03D0:  MOVF   36,W
03D1:  MOVWF  3A
03D2:  MOVLW  B0
03D3:  MOVWF  41
03D4:  MOVLW  72
03D5:  MOVWF  40
03D6:  MOVLW  4E
03D7:  MOVWF  3F
03D8:  MOVLW  83
03D9:  MOVWF  3E
*
051A:  MOVF   7A,W
051B:  MOVWF  39
051C:  MOVF   79,W
051D:  MOVWF  38
051E:  MOVF   78,W
051F:  MOVWF  37
0520:  MOVF   77,W
0521:  MOVWF  36
0522:  CALL   31B
0523:  MOVF   78,W
0524:  MOVWF  2B
....................    } 
.................... } 
0525:  INCF   33,F
0526:  GOTO   343
.................... PEIE=1; // Reabilita interrupçao timer 1 
0527:  BSF    0B.6
.................... } //Fim da coleta de dados 
0528:  RETURN
....................  
....................  
....................  
.................... void inicializa_timer1(void) 
.................... { 
.................... TMR1CS=0; // uso do clock de máquina. 
*
01B3:  BCF    10.1
.................... T1OSCEN=0; // circuito oscilador desligado. 
01B4:  BCF    10.3
.................... T1CKPS1=1; T1CKPS0=1; // prescaler 1:8. 
01B5:  BSF    10.5
01B6:  BSF    10.4
.................... TMR1H=0x0B; TMR1L=0xDC; // timer1 valor inicial 3036 (sobra 62500). meio segundo! 
01B7:  MOVLW  0B
01B8:  MOVWF  0F
01B9:  MOVLW  DC
01BA:  MOVWF  0E
.................... TMR1ON=1; // liga timer. 
01BB:  BSF    10.0
.................... } //Fim da inicialização do timer1 
01BC:  BCF    0A.3
01BD:  BCF    0A.4
01BE:  GOTO   609 (RETURN)
....................  
.................... void inicializa_ad(void) 
.................... { 
.................... ANSEL=0x0F; ANSELH=0x00; // Define RA como entrada analógica. 
*
01A1:  MOVLW  0F
01A2:  BSF    03.5
01A3:  BSF    03.6
01A4:  MOVWF  08
01A5:  CLRF   09
.................... ADCS1=1; ADCS0=1; // RC interno. 
01A6:  BCF    03.5
01A7:  BCF    03.6
01A8:  BSF    1F.7
01A9:  BSF    1F.6
.................... ADFM=1; // Justifica à direita. 
01AA:  BSF    03.5
01AB:  BSF    1F.7
.................... VCFG1=0; // Vref- => VSS. 
01AC:  BCF    1F.5
.................... VCFG0=0; // Vref+ => VCC. 
01AD:  BCF    1F.4
.................... ADON=1; // Liga sistema AD. 
01AE:  BCF    03.5
01AF:  BSF    1F.0
.................... }//Fim da inicialização do AD 
01B0:  BCF    0A.3
01B1:  BCF    0A.4
01B2:  GOTO   608 (RETURN)
....................  
....................  
.................... // Tratamento interrupção timer1 
.................... #INT_TIMER1 
.................... void interrupcao_timer1 (void) 
.................... { 
.................... TMR1ON=0; // desliga timer. 
*
0136:  BCF    10.0
.................... TMR1IF=0; // zera a flag. 
0137:  BCF    0C.0
....................  
.................... meio_segundo++; 
0138:  INCF   28,F
.................... if (meio_segundo==120)  {meio_segundo=0; minuto++;} 
0139:  MOVF   28,W
013A:  SUBLW  78
013B:  BTFSS  03.2
013C:  GOTO   13F
013D:  CLRF   28
013E:  INCF   2C,F
.................... if (minuto==15)   {minuto=0; quinze++; RB7=~RB7;} 
013F:  MOVF   2C,W
0140:  SUBLW  0F
0141:  BTFSS  03.2
0142:  GOTO   147
0143:  CLRF   2C
0144:  INCF   2D,F
0145:  MOVLW  80
0146:  XORWF  06,F
.................... if (minuto==9) liga_ventilacao (20); //liga ventilação para controle de co2 2 min on 
0147:  MOVF   2C,W
0148:  SUBLW  09
0149:  BTFSS  03.2
014A:  GOTO   14E
014B:  MOVLW  14
014C:  MOVWF  4A
014D:  CALL   038
.................... if (minuto==11)  liga_ventilacao (0); // desliga ventilação para controle de co2 
014E:  MOVF   2C,W
014F:  SUBLW  0B
0150:  BTFSS  03.2
0151:  GOTO   154
0152:  CLRF   4A
0153:  CALL   038
.................... if (quinze==48)   {quinze=0; doze++; liga_aquecimento(0); troca++;} 
0154:  MOVF   2D,W
0155:  SUBLW  30
0156:  BTFSS  03.2
0157:  GOTO   15D
0158:  CLRF   2D
0159:  INCF   2F,F
015A:  CLRF   4A
015B:  CALL   08D
015C:  INCF   30,F
.................... if (doze==4) doze=0; 
015D:  MOVF   2F,W
015E:  SUBLW  04
015F:  BTFSC  03.2
0160:  CLRF   2F
.................... if (troca==4) {troca=0; RD3=1;} 
0161:  MOVF   30,W
0162:  SUBLW  04
0163:  BTFSS  03.2
0164:  GOTO   167
0165:  CLRF   30
0166:  BSF    08.3
....................  
.................... TMR1H=0x0B; TMR1L=0xDC; // timer1 valor inicial 3036 (sobra 62500). Meio segundo!! 
0167:  MOVLW  0B
0168:  MOVWF  0F
0169:  MOVLW  DC
016A:  MOVWF  0E
.................... TMR1ON=1; // liga timer. 
016B:  BSF    10.0
.................... }//Fim da interrupção timer1 
....................  
.................... // tratamento da interrupção externa em RB0 
016C:  BCF    0C.0
016D:  BCF    0A.3
016E:  BCF    0A.4
016F:  GOTO   021
.................... #INT_EXT 
.................... void interrupcao_externa (void) 
.................... {int j=0; 
0170:  CLRF   4A
.................... GIE=0; //Desabilita interrupção 
0171:  BCF    0B.7
.................... INTF=0; // Zera flag de interrupçao 
0172:  BCF    0B.1
.................... RD3=0; //Desliga led sinalização troca 
0173:  BCF    08.3
.................... troca=0; //zera flag de troca 
0174:  CLRF   30
.................... RD4=1; // Aciona solenoide de saída da solução 
0175:  BSF    08.4
.................... for (j=0; j<180; j++) {delay_ms(1000);} //Espera agua sair (3min) 
0176:  CLRF   4A
0177:  MOVF   4A,W
0178:  SUBLW  B3
0179:  BTFSS  03.0
017A:  GOTO   197
017B:  MOVLW  04
017C:  MOVWF  4B
017D:  MOVLW  FA
017E:  MOVWF  4C
*
0193:  DECFSZ 4B,F
0194:  GOTO   17D
0195:  INCF   4A,F
0196:  GOTO   177
.................... RD4=0; //Fecha solenoide de saída da solução 
0197:  BCF    08.4
.................... RB1=1;//Abre solenoide de entrada da solução 
0198:  BSF    06.1
.................... while(!RB4); //Aguarda encher 
0199:  BTFSS  06.4
019A:  GOTO   199
.................... RB1=0; //Fecha solenoide de entrada da solução 
019B:  BCF    06.1
.................... GIE=1; //Habilita interrupções 
019C:  BSF    0B.7
.................... }//Fim do tratamento de interrupção externa 
019D:  BCF    0B.1
019E:  BCF    0A.3
019F:  BCF    0A.4
01A0:  GOTO   021

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
